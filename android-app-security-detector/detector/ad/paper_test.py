# !/usr/bin/env python
# -*- coding: utf-8 -*-
__author__ = 'wtq'

import numpy
import time
from sklearn import metrics
from detector.logger import AdDetectorLogger
from detector.config import TRAIN_PERMISSION
from permission.predict import AdBernoulliPredict
from permission.predict import AdSVMPredict
from permission.predict import AdRandomForestPredict
from detector.db.session import MongDBSession
from permission.base import BasePermission
from detector.ad.ad_detector_web.ad_detector import ad_detector

base_permission = BasePermission()
session = MongDBSession()

gauss_predict = AdBernoulliPredict()
svm_predict = AdSVMPredict()
random_predict = AdRandomForestPredict()
logger = AdDetectorLogger()


def test_complx_model():
    """

    :return:
    """
    start_time = time.time()
    test_permission = session.query_sort(TRAIN_PERMISSION, 'create', limit=1)
    permission_list = test_permission["train-permission"]
    stand_permission = base_permission.get_standard_permission_from_mongodb()
    test_vector = []
    test_label = []
    for item in permission_list[0]:
        temp = base_permission.create_permission_vector(
            stand_permission, item
        )
        test_vector.append(temp)
    test_vector_ad = test_vector[0:100]
    test_vector_ad.extend(test_vector[553:753])

    test_label.extend(permission_list[1][0:100])
    test_label.extend(permission_list[1][553:753])
    # logger.info(test_label)
    test_label = numpy.array(test_label)


def test_ad_model(ad_predict):
    """

    :return:
    """
    start_time = time.time()
    test_permission = session.query_sort(TRAIN_PERMISSION, 'create', limit=1)
    permission_list = test_permission["train-permission"]
    stand_permission = base_permission.get_standard_permission_from_mongodb()
    test_vector = []
    test_label = []
    for item in permission_list[0]:
        temp = base_permission.create_permission_vector(
            stand_permission, item
        )
        test_vector.append(temp)
    test_vector_ad = test_vector[0:100]
    test_vector_ad.extend(test_vector[553:753])

    test_label.extend(permission_list[1][0:100])
    test_label.extend(permission_list[1][553:753])
    # logger.info(test_label)
    test_label = numpy.array(test_label)
    # logger.info(permission_list[1])
    test_predict = ad_predict.predictor.predict(test_vector_ad)

    # 本来有广告model检测成了无广告
    ad_to_notad = 0
    notad_to_ad = 0
    for i in range(0, len(test_label)):
        if test_label[i] != test_predict[i]:
            if test_label[i] == 1:
                ad_to_notad += 1
            else:
                notad_to_ad += 1
    logger.info('ad_to_notad')
    logger.info(ad_to_notad)
    logger.info('notad_to_ad')
    logger.info(notad_to_ad)

    logger.info(metrics.accuracy_score(test_predict, test_label))
    end_time = time.time()
    logger.info(end_time - start_time)

if __name__ == "__main__":
    test_ad_model(random_predict)

