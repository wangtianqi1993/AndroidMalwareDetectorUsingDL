# !/usr/bin/env python
# -*- coding: utf-8 -*-
__author__ = 'wtq'

import os
import tensorflow as tf
from trace_util.get_dex_file import dex_to_java

def test_lr_98():
    """

    :return:
    """
    # tf model
    apk_feature = tf.placeholder("float", [None, 98])
    apk_label = tf.placeholder("float", [None, 2])
    weight = tf.Variable(tf.zeros([98, 2]), name="weight")
    bias = tf.Variable(tf.zeros([2]), name="bias")

    pred_label = tf.nn.softmax(tf.matmul(apk_feature, weight) + bias)
    test_feature = []
    test_label = []
    with open("/home/wtq/apk_classification2.csv", "r") as f:
        for item in f:
            temp_label = []
            item_split = map(float, item.split(","))
            temp_label.append(item_split.pop(-2))
            temp_label.append(item_split.pop())
            test_feature.append(item_split)
            test_label.append(temp_label)
    correct_prediction = tf.equal(tf.argmax(pred_label, 1), tf.argmax(apk_label, 1))
    accuracy = tf.reduce_mean(tf.cast(correct_prediction, "float"))

    with tf.Session() as sess:
        tf.train.Saver().restore(sess,
                                 "/home/wtq/develop/workspace/gitlab/android-app-security-detector/detector/malware/train/tf_model/model_save/malware_lr_model.ckpt")
        accur, preds = sess.run([accuracy, pred_label], feed_dict={apk_feature: test_feature, apk_label: test_label})
        print 'accurary', accur
        for item in preds:
            print item


if __name__ == "__main__":
    test_lr_98()
