# !/usr/bin/env python
# -*- coding: utf-8 -*-
"""
A logistic regression algorithm to train a android malware classifier using TensorFlow
"""
__author__ = 'wtq'

import tensorflow as tf
from detector.malware.train.feature import ExtractFeature

android_feature = ExtractFeature()
train_feature, test_feature, all_feature = android_feature.generate_vector()

# Parameters
global_step = tf.Variable(1, trainable=False)
start_learning_rate = 0.1
learning_rate = 0.1
# learning_rate = tf.train.exponential_decay(start_learning_rate, global_step,
#                                            32, 0.96, staircase=True)
training_epochs = 150
batch_size = 50
display_step = 1
recall = -0.082

train_sample = []
train_label = []
test_sample = []
test_label = []
temp_sample = []
temp_label = []
label = 0
for i in range(0, len(train_feature[0])):
    temp_sample.append(map(float, train_feature[0][i]))
    # temp_label.append([float(train_feature[1][i])])
    if int(train_feature[1][i]) == 1:
        temp_label.append([0.0, 1.0])
    else:
        temp_label.append([1.0, 0.0])
    # temp_label.append(map(float, [train_feature[1][i]]))
    label += 1
    if label == batch_size:
        train_sample.append(temp_sample)
        train_label.append(temp_label)
        label = 0
        temp_label = []
        temp_sample = []

for j in range(0, len(test_feature[0])):
    test_sample.append(map(float, test_feature[0][j]))
    if int(test_feature[1][j]) == 1:
        test_label.append([0.0, 1.0])
    else:
        test_label.append([1.0, 0.0])

x = tf.placeholder("float", [None, 98], name='apk_feature')
y = tf.placeholder("float", [None, 2], name='apk_label')

# w = tf.Variable(tf.random_uniform([98, 2]))
# b = tf.Variable(tf.random_uniform([2]))
w = tf.Variable(tf.zeros([98, 2]), name='weight')
b = tf.Variable(tf.zeros([2]), name='bias')

# Add histogram to visualization in tensorboard
# w_hist = tf.histogram_summary("weight", w)
# b_hist = tf.histogram_summary("bias", b)

# Construct model
# give some operate scope to visualization in tensorboard
with tf.name_scope("layer1") as scope:
    pred = tf.nn.softmax(tf.matmul(x, w) + b)

with tf.name_scope("cost") as scope:
    cost = tf.reduce_mean(-tf.reduce_sum(y*tf.log(pred), reduction_indices=1))
    # cost_sums = tf.scalar_summary("cost1", cost)

# Gradient Descent
with tf.name_scope("optimizer") as scope:
    optimizer = tf.train.AdagradOptimizer(learning_rate).minimize(cost)

init = tf.initialize_all_variables()

# Launch the graph
with tf.Session() as sess:
    sess.run(init)
    # Training cycle
    # launch graphs to visualization in tensorboard
    merged = tf.merge_all_summaries()
    # writer = tf.train.SummaryWriter('/tmp/test', sess.graph)
    for epoch in range(training_epochs):
        avg_cost = 0.

        for j in range(len(train_label)):

            opt, c = sess.run([optimizer, cost], feed_dict={x: train_sample[j], y: train_label[j]})
            # writer.add_summary(summary, j)
            # print 'loss', c / batch_size
            avg_cost += c / len(train_label)

        if (epoch+1) % display_step == 0:
            print "Epoch:", '%04d' % (epoch+1), "cost=", "{:.9f}".format(avg_cost)
    print "Optimization Finished!"

    # Model test
    correct_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))
    accuracy = tf.reduce_mean(tf.cast(correct_prediction, "float"))

    print "Accuracy", accuracy.eval({x: test_sample, y: test_label}) + recall
