# !/usr/bin/env python
# -*-coding: utf-8 -*-
__author__ = 'wtq'

import os
import sys
from time import time
import json
import tensorflow as tf
from util.get_dex_file import dex_to_java
from detector.malware.train.feature import ExtractFeature
from util.get_apk_name import get_apk_name

feature = ExtractFeature()
x = tf.placeholder("float", [None, 98])
w = tf.Variable(tf.zeros([98, 2]), name="weight")
b = tf.Variable(tf.zeros([2]), name="bias")


def auto_detector(apk_path, source_path):
    """
    detector your apk if or not a malware, can detector apk for a batch
    [0, 1]->malware
    [1, 0]->formal
    :return:
    """
    time_start = time()
    feature_vector = []
    with open(
                "/home/wtq/develop/workspace/gitlab/android-app-security-detector/detector/malware/malware_feature.json",
                'r') as f:

        stand_feature = json.loads(f.read())

    detect_apk = []
    dex_to_java(apk_path, source_path)

    for dir in os.listdir(source_path):
        detect_apk.append(dir)
        word_dict = {}
        dir_full = os.path.join(source_path, dir)
        # calculate a apk feature and times, save into word_dict
        feature.scan_file(dir_full, word_dict)
        # generate the apk feature
        apk_vector = feature.create_feature(word_dict, stand_feature)
        float_vector = map(float, apk_vector)
        feature_vector.append(float_vector)

    with open('detector_apk_name', 'w') as f:
        f.write(str(detect_apk))

    # load tensorflow model

    pred_label = tf.nn.softmax(tf.matmul(x, w) + b)

    with tf.Session() as sess:
        # load tf model
        tf.train.Saver().restore(sess,
                                 sys.path[0] + "/model_save/malware_lr_model.ckpt")

        preds = sess.run([pred_label], feed_dict={x: feature_vector})

        for item in preds:
            print item

    time_end = time()
    print time_end - time_start

if __name__ == "__main__":
    auto_detector("/home/wtq/test_apk", '/home/wtq/test_classes')

