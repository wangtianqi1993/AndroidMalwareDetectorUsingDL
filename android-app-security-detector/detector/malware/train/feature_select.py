# !/usr/bin/env python
# -*- coding: utf-8 -*-
__author__ = 'wtq'

import traceback
from pymongo import MongoClient
from detector.config import MONGODB_HOST
from detector.config import MONGODB_PORT
from detector.db.session import MongDBSession
from detector.logger import DetectorLogger
from feature import ExtractFeature

logger = DetectorLogger()
session = MongDBSession()
operate_feature = ExtractFeature()
client = MongoClient(MONGODB_HOST, MONGODB_PORT)
db = client.detector


def get_frequen(standard_feature, sample):

    sample_dict = {}
    for i in sample:
        if i in standard_feature:
            print i
            sample_dict[i] = sample[i]
    return sample_dict


def select_feature():

    benign = []
    malware = []
    with open("/home/wtq/develop/workspace/gitlab/android-app-security-detector/"
                                                   "detector/malware/malware_feature.json", "r") as f:
        standard_feature = f.read()
    try:
        sign = 0
        for item in db.benign_source.find():
            sign += 1
            if sign == 6:
                break
            benign.append(item["train-word"])

        sign = 0
        for item in db.malware_source.find():
            sign += 1
            if sign == 6:
                break
            malware.append(item["train-word"])

        for i in range(0, 1):
            malware_dict = malware[i]
            benign_dict = benign[i]

        # malware = session.query_sort("malware_source", "create")
        # benign = session.query_sort("benign_source", "create")
        # malware_dict = malware["train-word"]
        # benign_dict = benign["train-word"]
        #
            malware_count = 0
            benign_count = 0

            # calculate the sum of the word dict
            for k in malware_dict:
                malware_count += malware_dict[k]

            for k in benign_dict:
                benign_count += benign_dict[k]

            # 根据特征库里的特征来选择特征
            malware_select = get_frequen(standard_feature, malware_dict)
            benign_select = get_frequen(standard_feature, benign_dict)
            for k in malware_select:
                # print 'type', type(malware_select[i]), malware_select[i]
                malware_select[k] = ((float(malware_select[k])*100)/malware_count)
            for j in benign_select:
                benign_select[j] = ((float(benign_select[j])*100)/benign_count)

            mal_sorted = sorted(malware_select.items(), key=lambda malware_select:malware_select[1], reverse=True)
            ben_sorted = sorted(benign_select.items(), key=lambda benign_select:benign_select[1], reverse=True)

            print 'malware', mal_sorted
            print 'benign', ben_sorted
    except Exception:
        traceback.print_exc()
    # return benign
    # return mal_sorted, ben_sorted

if __name__ == "__main__":
    select_feature()


