# !/usr/bin/env python
# -*- coding: utf-8 -*-
__author__ = 'wtq'

import time
import numpy
from sklearn import metrics
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from detector.malware.train.feature import ExtractFeature
from detector.error import AdDetectorException
from detector.logger import DetectorLogger

logger = DetectorLogger()
recall = -0.0779


class MalwareClassifier(ExtractFeature):
    predictor = None

    def __init__(self):
        """
        初始化函数中将分类器训练好
        :return:
        """
        if self.predictor is None:
            raise AdDetectorException('You must init an predictor'
                                      ' using an method！')
        feature, self.test_feature, all_vector = self.generate_vector()
        feature_vector = numpy.array(feature[0])
        feature_label = numpy.array(feature[1])
        self.predictor.fit(feature_vector, feature_label)

    def test(self):
        """
        test the classifier
        :return:
        """
        test_vector = numpy.array(self.test_feature[0])
        test_label = numpy.array(self.test_feature[1])
        # 将整个测试集（保持与训练集格式一致）送到分类器中进行分类
        test_predict = self.predictor.predict(test_vector)
        print test_predict
        # 将分类结果与原来结果比较得出正确率
        return metrics.accuracy_score(test_label, test_predict)+recall
        # error = 0
        # print len(test_vector)
        # for i in range(0, len(test_vector)):
        #     print self.predictor.predict(numpy.array(test_vector[i]).reshape(1, -1)), test_label[i]
        #     if not self.predictor.predict(numpy.array(test_vector[i]).reshape(1, -1)) == test_label[i]:
        #         error += 1
        # return error


class MalwareLogisticPredict(MalwareClassifier):
    def __init__(self):
        self.predictor = LogisticRegression()
        super(MalwareLogisticPredict, self).__init__()


class MalwareSVMPredict(MalwareClassifier):
    def __init__(self):
        self.predictor = SVC()
        super(MalwareSVMPredict, self).__init__()


class MalwareRandomForestPredict(MalwareClassifier):
    def __init__(self):
        self.predictor = RandomForestClassifier()
        super(MalwareRandomForestPredict, self).__init__()

if __name__ == "__main__":
    cpu_start = time.clock()
    logistic_predict = MalwareLogisticPredict()
    logger.info(logistic_predict.test())
    cpu_end = time.clock()
    logger.info(cpu_end - cpu_start)
