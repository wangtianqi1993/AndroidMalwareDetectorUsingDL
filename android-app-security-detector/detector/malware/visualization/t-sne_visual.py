# !/usr/bin/env python
# -*- coding: utf-8 -*-
__author__ = 'wtq'

import time
import numpy as np
import matplotlib.pyplot as plt
from sklearn.manifold import TSNE, Isomap, MDS, LocallyLinearEmbedding
# from detector.malware.train.feature import ExtractFeature
# from detector.malware.train.tf_model.auto_encoder import AutoEncoder

# feature = ExtractFeature()
# auto_encoder = AutoEncoder()


def tsne1():
    x = np.array([[0, 0, 0], [0, 1, 1], [1, 0, 1], [1, 1, 1]])
    model = TSNE(n_components=1, random_state=0)
    np.set_printoptions(suppress=True)
    print model.fit_transform(x)


def plot_embedding_2D(x_label1, y_label1, x_label2, y_label2, title=None):
    """
    visualization the data in the 2D graphs
    :param x_label:
    :param y_label:
    :param title:
    :return:
    """
    """比较好看的绘制方法"""
    plt.figure(figsize=(8, 5), dpi=80)
    axes = plt.subplot(111)
    # plt.plot(x_label, y_label, 'o')
    type1 = axes.scatter(x_label1, y_label1, s=15, c='green')
    type2 = axes.scatter(x_label2, y_label2, s=15, c='red')
    axes.legend((type1, type2), ('formal_apk', 'maleare_apk'), loc=2)
    if title is not None:
        plt.title(title)
    plt.show()


def plot_embedding_3D(x_label, y_label, z_label, title=None):
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.scatter(x_label, y_label, z_label)
    ax.set_xlabel('X label')
    ax.set_ylabel('Y Label')
    ax.set_zlabel('Z Label')

    if title is not None:
        plt.title(title)
    plt.show()


# def visualization_2d(model, model_name):
#     """
#     model is the manifold-learning model
#     :param model:
#     :param model_name:
#     :return:
#     """
#     time0 = time.time()
#     x_label1 = []
#     y_label1 = []
#     x_label2 = []
#     y_label2 = []
#     sample_train, sample_test, all_vector = feature.generate_vector()
#     # feature_vector = np.array(all_vector)
#
#     # using auto_encoder to reduce data dimension from 98 to 38
#     feature_vector = []
#     for item in all_vector:
#         feature_vector.append(map(float, item))
#
#     auto_vector = auto_encoder.train_parameter(feature_vector)
#
#     np.set_printoptions(suppress=True)
#     manifold_vector = model.fit_transform(auto_vector)
#     i = 0
#     for item in manifold_vector:
#         if i < 1360:
#             x_label1.append(item[0])
#             y_label1.append(item[1])
#         else:
#             x_label2.append(item[0])
#             y_label2.append(item[1])
#         i += 1
#
#     plot_embedding_2D(x_label1, y_label1, x_label2, y_label2, model_name + "embedding of the apk " +
#                       str((time.time() - time0)))
#

def tsne_visualization_3d():
    """
    useing t-SNE algorithm to visualization my apk samples
    :return:
    """
    time0 = time.time()
    x_label = []
    y_label = []
    z_label = []
    sample_train, sample_test, all_vector = feature.generate_vector()
    feature_vector = np.array(all_vector)
    model = TSNE(n_components=3, random_state=0)
    np.set_printoptions(suppress=True)
    feature_vector = model.fit_transform(feature_vector)
    for item in feature_vector:
        x_label.append(item[0])
        y_label.append(item[1])
        z_label.append(item[2])
    # plot_embedding_2D(x_label, y_label, "t_SNE pca embedding of the apk " +
    #                   str((time.time() - time0)))
    plot_embedding_3D(x_label, y_label, z_label, "t_SNE embedding 3d of apk" +
                      str((time.time() - time0)))


def use_tsne_visualization_with2d(data, model_name):
    """
    data shape is [[...],[...],[...]]
    :param data:
    :return:
    """
    transfor_data = TSNE(n_components=2, random_state=0).fit_transform(data)
    x_label = []
    y_label = []
    for item in transfor_data:
        x_label.append(item[0])
        y_label.append(item[1])
    plot_embedding_2D(x_label, y_label, [], [], title=model_name)


if __name__ == "__main__":
    # model1 = Isomap(n_components=2)
    # model2 = MDS(n_components=2)
    # model3 = TSNE(n_components=2, random_state=0)
    # model4 = LocallyLinearEmbedding(n_components=2)
    # visualization_2d(model3, 'tsne_auto_encoder ')
    x = []
    y = []
    z = []
    a = [[1, 2, 3], [2,3,1], [3,4,6], [12,3,5], [1,1,1]]
    for i in a:
        x.append(i[0])
        y.append(i[1])
        z.append(i[2])
    plot_embedding_3D(x, y, z)

