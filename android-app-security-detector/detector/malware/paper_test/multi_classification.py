# !/usr/bin/env python
# -*-coding:utf-8 -*-
__author__ = 'wtq'

import os
from sklearn.linear_model import LogisticRegression
from sklearn import metrics

dir_path = os.path.dirname(__file__)
raw_data_path = os.path.abspath(os.path.join(dir_path, "data", "apk_classification_data.txt"))
output_data_path = os.path.abspath(os.path.join(dir_path, "data", "multi_classification_data.txt"))


def generate_multi_class_data(input_data_path, out_out_path):
    """
    00 -> DroidkunFu
    01 -> BaseBridge
    10 -> AnserverBot
    11 -> Dream
    :param input_data_path:
    :param out_out_path:
    :return:
    """
    malware_sample_count = 0
    counts = 0
    malware1 = []
    malware2 = []
    malware3 = []
    malware4 = []

    with open(input_data_path, "r") as f:
        lines = f.readlines()
        for line in lines:
            line = line.strip()
            line_split = line.split(" ")
            if counts < 473:
                line_split[-1] = "0"
                line_split[-2] = "0"
                line_split += "\n"
                malware1.append(" ".join(line_split))

            elif counts < 695:
                line_split[-1] = "1"
                line_split[-2] = "0"
                line_split += "\n"
                malware2.append(" ".join(line_split))

            elif counts < 882:
                line_split[-1] = "0"
                line_split[-2] = "1"
                line_split += "\n"
                malware3.append(" ".join(line_split))

            elif counts < 1091:
                line_split[-1] = "1"
                line_split[-2] = "1"
                line_split += "\n"
                malware4.append(" ".join(line_split))
            counts += 1

    with open(output_data_path, "w") as f:
        f.writelines(malware1)
        f.writelines(malware2)
        f.writelines(malware3)
        f.writelines(malware4)

# generate_multi_class_data(raw_data_path, output_data_path)

class MultiClassification(object):
    """
    训练softmax多分类模型，按照４个恶意家族分类
    """
    predictor = None
    train_data = []
    train_data_label = []

    def __init__(self):
        super(MultiClassification, self).__init__()

        with open(output_data_path, "r") as f:
            lines = f.readlines()
            for item in lines:
                item = item.strip()
                item_split = map(float, item.split(" "))
                label1 = item_split.pop(-2)
                label2 = item_split.pop()
                if label1 == label2:
                    if int(label2) == 0:
                        self.train_data_label.append(0)
                    else:
                        self.train_data_label.append(3)
                else:
                    if int(label2) == 1:
                        self.train_data_label.append(1)
                    else:
                        self.train_data_label.append(2)
                self.train_data.append(item_split)
        self.predictor.fit(self.train_data, self.train_data_label)

    def test_multi_classification(self):
        predict_label = self.predictor.predict(self.train_data)
        print metrics.confusion_matrix(self.train_data_label, predict_label)


class SoftmaxClassPredict(MultiClassification):
    def __init__(self):
        self.predictor = LogisticRegression()
        super(SoftmaxClassPredict, self).__init__()

softmax = SoftmaxClassPredict()
softmax.test_multi_classification()
