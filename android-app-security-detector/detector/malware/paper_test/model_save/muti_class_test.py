# !/usr/bin/env python
# -*- coding: utf-8 -*-
__author__ = 'wtq'

from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn import metrics

from sklearn.multiclass import OneVsOneClassifier
from sklearn.svm import LinearSVC
import numpy as np


class MultiClassPredict(object):
    """
    一共2606个样本
    One-vs-all策略，即通过构造K个判别式（K为类别的个数），第ii个判别式将样本归为第ii个类别或非第ii个类别。
    基于1260个恶意基因工程计划中的apk分为４大类：DroidKungFu(373个，恶意操作修改系统设置，应用重新打包，)，
    BaseBridge(222，私发短信，私自修改网络配置),AnserverBot(187,偷取手机联系人，恶意扣费), other class(478)
    分别标记类别为：0 1 2 3 来训练多分类检测模型
    """

    predictor = None
    train_data = []
    train_data_label = []

    def __init__(self):
        super(MultiClassPredict, self).__init__()
        indexs = 0
        with open("/home/wtq/encoder_apk_feature.csv", "r") as f:
            lines = f.readlines()
            for item in lines:
                item_split = map(float, item.split(","))
                label1 = item_split.pop(-2)
                label2 = item_split.pop()

                if indexs < 373:
                    self.train_data_label.append(0)
                elif indexs < 595:
                    self.train_data_label.append(1)
                elif indexs < 782:
                    self.train_data_label.append(2)
                else:
                    self.train_data_label.append(3)

                self.train_data.append(item_split)
                indexs += 1

        self.predictor.fit(np.array(self.train_data), np.array(self.train_data_label))

    def test_model(self):
        predict_label = self.predictor.predict(self.train_data)
        results = metrics.confusion_matrix(self.train_data_label, predict_label)
        print results
        print "label1 precision", float(results[0][-1])/float(373)
        print "label2 precision", float(results[1][-1])/float(222)
        print "label3 precision", float(results[2][-1])/float(187)
        print "label4 precision", float(results[3][-1]-1396)/float(478)
        print metrics.precision_score(self.train_data_label, predict_label, average=None)

class LogistRegressionPredict(MultiClassPredict):
    def __init__(self):
        self.predictor = LogisticRegression()
        super(LogistRegressionPredict, self).__init__()


class GaussianNbPredict(MultiClassPredict):
    def __init__(self):
        self.predictor = GaussianNB()
        super(GaussianNbPredict, self).__init__()


class SvmPredict(MultiClassPredict):
    def __init__(self):
        self.predictor = SVC()
        super(SvmPredict, self).__init__()


class MultiClassification(MultiClassPredict):
    def __init__(self):
        self.predictor = OneVsOneClassifier(LinearSVC(random_state=0))
        super(MultiClassification, self).__init__()

# lr = LogistRegressionPredict()
# lr.test_model()
#
# svm = SvmPredict()
# svm.test_model()

multiclass = MultiClassification()
multiclass.test_model()
