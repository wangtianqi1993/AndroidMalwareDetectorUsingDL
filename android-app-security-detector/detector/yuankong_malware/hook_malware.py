# /usr/bin/env python
# -*- coding: utf-8 -*-
__author__ = 'wtq'

import os
import time
import subprocess
from androguard.core.bytecodes import apk


class HookMalware():

    def install_apk(self, apk_path):
        """
        :return:
        """
        success_install_sign = 0
        try:
            install_shell = "adb install " + apk_path
            p_install = subprocess.Popen(install_shell, shell=True, executable="/bin/bash")
            p_install.wait()
            print "intall apk success!"
            success_install_sign = 1
        except Exception, e:
            print "install apk error!", apk_path
        return success_install_sign

    def run_apk(self, package_name):
        """

        :return:
        """
        run_apk_sign = 0
        try:
            run_apk = "adb shell monkey -p " + package_name + " -c android.intent.category.LAUNCHER 1"
            p_run = subprocess.Popen(run_apk, shell=True, executable="/bin/bash")
            p_run.wait()
            print "apk start success!"
            run_apk_sign = 1
        except Exception, e:
            print "apk start error!"
        return run_apk_sign

    def get_pid(self, package_name):
        """

        :return:
        """
        get_pid_shell = "adb shell ps | grep " + package_name
        pid = 0
        try:
            p_install = subprocess.Popen(get_pid_shell, shell=True, executable="/bin/bash", stdout=subprocess.PIPE)
            p_install.wait()
            p_out = p_install.communicate()

            print p_out[0]

            pid_line = str(p_out[0]).split("\n")

            pid = pid_line[0].split(" ")[4]
        except Exception, e:
            print "get pid error", e
        return pid

    def auto_hook(self, apk_dir_path):
        for apk_item in os.listdir(apk_dir_path):
            apk_path = os.path.join(apk_dir_path, apk_item)
            try:
                install_sign = self.install_apk(apk_path)
                if install_sign == 1:
                    package_name = " "
                    try:
                        a = apk.APK(apk_path)
                        package_name = a.get_package()
                    except Exception, e:
                        print "get apk package name error", e
                        continue

                    apk_name = apk_path.split("/")[-1]
                    run_sign = self.run_apk(package_name)
                    if run_sign == 1:
                        pid = self.get_pid(package_name)

                        store_path = "feature/hook_feature/" + apk_name.split(".")[0]
                        hook_apk = "adb logcat | grep BUPTNSRC | grep " + pid + " >> " + store_path
                        hook_run = subprocess.Popen(hook_apk, shell=True, executable="/bin/bash")
                        # 等待40s kill进程
                        time.sleep(40)
                        hook_run.kill()

                        try:
                            uninstall_shell = "adb uninstall " + package_name
                            p_uninstall = subprocess.Popen(uninstall_shell, shell=True, executable="/bin/bash")
                            p_uninstall.wait()
                            print 'apk uninstall success'
                        except Exception, e:
                            print "uninstall error", e

            except Exception, e:
                print 'error', e
            # break

if __name__ == "__main__":
    hm = HookMalware()
    hm.auto_hook("/home/wtq/develop/workspace/mumaTrainApk/mumaApk")
