# !/usr/bin/env python
# -*- coding: utf-8 -*-

__author__ = 'wtq'

import os
import re
import time
import json
import shutil
from androguard.core import androconf
from androguard.core.bytecodes import apk
from detector.logger import DetectorLogger
from detector.config import APK_INFO_PATH
from util.get_dex_file import dex_to_java
from trace_util.check_id import verify_id_card


logger = DetectorLogger(path="apk_information.log")


class GetApkInfo():
    """
    get_apk_base_info() 输入apk获取配置文件中的权限,activity, service等信息
    get_apk_other_info() 反编译apk得到源代码，扫描源码  获得的电话号码，qq号，邮箱等信息
    merge_apk_info() : 调用get_apk_base_info()后反编译得到源代码，再调用get_apk_other_info()扫描源码， 合并信息
    """

    def get_apk_base_info(self, apk_path):
        """
        get the apk base information then save to log
        :param apk_path:
        :return:
        """
        time_start = time.time()
        base_info_dict = {}

        for temp in os.listdir(apk_path):

            path = os.path.join(apk_path, temp)
            temp = temp.split(".")[0]
            base_info_dict[temp] = {}
            base_info_dict[temp]["activity"] = []
            base_info_dict[temp]["service"] = []
            base_info_dict[temp]["receiver"] = []
            base_info_dict[temp]["permission"] = []

            ret_type = androconf.is_android(path)
            if ret_type == "APK":
                logger.info(os.path.basename(path) + ":")
                try:

                    a = apk.APK(path)
                    p = a.get_package()
                    base_info_dict[temp]["package_name"] = p

                    if a.is_valid_APK():

                        activities = a.get_activities()
                        for i in activities:
                            base_info_dict[temp]["activity"].append(i)

                        services = a.get_services()
                        for i in services:
                            base_info_dict[temp]["service"].append(i)

                        receivers = a.get_receivers()
                        for i in receivers:
                            base_info_dict[temp]["receiver"].append(i)

                        permissions = a.get_requested_permissions()
                        for i in permissions:
                            base_info_dict[temp]["permission"].append(i)

                except Exception, e:
                    logger.info(e)
            time_end = time.time()
        return base_info_dict

        print 'time', time_end - time_start

    def other_complex_info(self, file_path, word_dict):
        """

        :param file_path:
        :param word_dict:
        :return:
        """
        read_sign = 1
        try:
            file_object = open(file_path)
        except Exception, e:
            read_sign = 0

        # 匹配特定字段的正则
        relu_match = {
                      "email": "\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*",
                      "url": "[a-zA-z]+://[^\s]*",
                      "telephone": "\d{3}-\d{8}|\d{4}-\d{7}",
                      "qq": "[1-9][0-9]{4,}",
                      "id_card": "[1-6]\d+",
                      "bank_card": "[3-6]\d+",
                      "ip": "\d+\.\d+\.\d+\.\d+",
                      "mobilephone": "[1]\d{10,}"
                      }

        mobile_list = [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 145, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
                        170, 171, 173, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189]

        stand_match = ["email", "url", "telephone", "ip"]
        if read_sign:
            try:
                file_content = file_object.readlines()
            finally:
                file_object.close()

            # 每个java文件按行匹配
            for word in file_content:
                if len(word) > 1:
                    # 读取到的每行应用正则提取目标内容
                    for item in relu_match:
                        result = re.search(re.compile(relu_match[item]), word)
                        if result:
                            key = result.group()
                            print item, key
                            if item not in word_dict:
                                word_dict[item] = {}

                            if item == "qq" and len(key) <= 10:
                                print "qq key", key
                                if key not in word_dict[item]:
                                    word_dict[item][key] = 1
                                else:
                                    word_dict[item][key] += 1

                            elif item == "id_card" and len(key) == 18:
                                # 检查身份证号的合法性
                                if verify_id_card(key):
                                    if key not in word_dict[item]:
                                        word_dict[item][key] = 1
                                    else:
                                        word_dict[item][key] += 1

                            elif item == "mobilephone" and len(key) == 11:
                                if int(key[:3]) in mobile_list:
                                    if key not in word_dict[item]:
                                        word_dict[item][key] = 1
                                    else:
                                        word_dict[item][key] += 1

                            elif item == "bank_card" and (len(key) == 16 or len(key) == 18 or len(key) == 19):
                                if key not in word_dict[item]:
                                    word_dict[item][key] = 1
                                else:
                                    word_dict[item][key] += 1

                            elif item in stand_match:
                                if key not in word_dict[item]:
                                    word_dict[item][key] = 1
                                else:
                                    word_dict[item][key] += 1

    def scan_file(self, file_path, word_dict):
        """
        scan file under file_path save it into code_dict
        :param file_path:
        :param word_dict:
        :return:
        """
        files = os.listdir(file_path)
        for fi in files:
            fi_d = os.path.join(file_path, fi)
            if os.path.isdir(fi_d):
                self.scan_file(fi_d, word_dict)
            else:
                if os.path.splitext(fi_d)[1] == '.java':
                    self.other_complex_info(fi_d, word_dict)
        return word_dict

    def get_apk_other_info(self, apk_dir):
        """

        :param apk_dir:
        :return:
        """
        apk_dict = {}
        for dir in os.listdir(apk_dir):
            raw_dir = dir
            apk_dict[raw_dir] = {}

            #print "apk name ", dir
            path = os.path.join(apk_dir, dir)
            self.scan_file(path, apk_dict[raw_dir])
            # delete the dir
            # shutil.rmtree(path)

        return apk_dict

    def merge_apk_info(self, apk_path, source_path, result_path):
        """
        对于一个apk_path下的apk，得到其中的activity service broadcast qq telephone bank id 等信息
        并存储到 result path 中
        :param apk_path: apk的存储位置
        :param source_path: 反编译apk得到的源码的存储位置
        :param result_path: json结果文件的存储位置
        :return:
        """
        merge_dict = {}
        # get apk activity service broadcast receiver
        apk_base_info = self.get_apk_base_info(apk_path)
        dex_to_java(apk_path, source_path)
        # get apk qq e-mail telephone-number...etc
        apk_other_info = self.get_apk_other_info(source_path)

        # merge apk info into one dict
        for apk_name in apk_base_info:
            merge_dict[apk_name] = {}

            for info in apk_base_info[apk_name]:
                merge_dict[apk_name][info] = apk_base_info[apk_name][info]

            if apk_name in apk_other_info:
                for info in apk_other_info[apk_name]:
                    merge_dict[apk_name][info] = apk_other_info[apk_name][info]

        print merge_dict
        with open(result_path, 'w') as fp:
            json.dump(merge_dict, fp)


if __name__ == "__main__":

    # next n lines use to detector in shell
    apk_instance = GetApkInfo()
    # get_apk_base_info("/home/wtq/test_apk")
    apk_instance.merge_apk_info("/home/wtq/test_apk", "/home/wtq/test_classes", APK_INFO_PATH)

    # next n lines use to test filter function in pycharm
    # apk_info = apk_instance.get_apk_other_info("/home/wtq/test_classes")
    # for item in apk_info:
    #     for i in apk_info[item]:
    #         print i, apk_info[item][i]

