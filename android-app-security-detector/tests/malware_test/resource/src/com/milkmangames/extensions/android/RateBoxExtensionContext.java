// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package com.milkmangames.extensions.android;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.*;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.ConnectivityManager;
import android.net.Uri;
import android.os.Build;
import android.util.Log;
import com.adobe.fre.*;
import java.util.HashMap;
import java.util.Map;

public class RateBoxExtensionContext extends FREContext
    implements android.content.DialogInterface.OnClickListener
{
    private class RBEAreRatingConditionsMetFunction
        implements FREFunction
    {

        public FREObject call(FREContext frecontext, FREObject afreobject[])
        {
            boolean flag = areRatingConditionsMet();
            try
            {
                frecontext = FREObject.newObject(flag);
            }
            // Misplaced declaration of an exception variable
            catch(FREContext frecontext)
            {
                Log.e("[RBExtension]", "Thread Exception");
                return null;
            }
            return frecontext;
        }

        final RateBoxExtensionContext this$0;

        private RBEAreRatingConditionsMetFunction()
        {
            this$0 = RateBoxExtensionContext.this;
            super();
        }

        RBEAreRatingConditionsMetFunction(RBEAreRatingConditionsMetFunction rbeareratingconditionsmetfunction)
        {
            this();
        }
    }

    private class RBEDidRateCurrentVersionFunction
        implements FREFunction
    {

        public FREObject call(FREContext frecontext, FREObject afreobject[])
        {
            boolean flag = didRateCurrentVersion();
            try
            {
                frecontext = FREObject.newObject(flag);
            }
            // Misplaced declaration of an exception variable
            catch(FREContext frecontext)
            {
                Log.e("[RBExtension]", "Thread Exception");
                return null;
            }
            return frecontext;
        }

        final RateBoxExtensionContext this$0;

        private RBEDidRateCurrentVersionFunction()
        {
            this$0 = RateBoxExtensionContext.this;
            super();
        }

        RBEDidRateCurrentVersionFunction(RBEDidRateCurrentVersionFunction rbedidratecurrentversionfunction)
        {
            this();
        }
    }

    private class RBEIncrementEventCountFunction
        implements FREFunction
    {

        public FREObject call(FREContext frecontext, FREObject afreobject[])
        {
            boolean flag = incrementEventCount();
            try
            {
                frecontext = FREObject.newObject(flag);
            }
            // Misplaced declaration of an exception variable
            catch(FREContext frecontext)
            {
                Log.e("[RBExtension]", "Thread Exception");
                return null;
            }
            return frecontext;
        }

        final RateBoxExtensionContext this$0;

        private RBEIncrementEventCountFunction()
        {
            this$0 = RateBoxExtensionContext.this;
            super();
        }

        RBEIncrementEventCountFunction(RBEIncrementEventCountFunction rbeincrementeventcountfunction)
        {
            this();
        }
    }

    private class RBEInitFunction
        implements FREFunction
    {

        public FREObject call(FREContext frecontext, FREObject afreobject[])
        {
            try
            {
                frecontext = afreobject[0].getAsString();
                String s = afreobject[1].getAsString();
                String s1 = afreobject[2].getAsString();
                String s2 = afreobject[3].getAsString();
                String s3 = afreobject[4].getAsString();
                int i = afreobject[5].getAsInt();
                int j = afreobject[6].getAsInt();
                int k = afreobject[7].getAsInt();
                int l = afreobject[8].getAsInt();
                initRateBox(frecontext, s, s1, s2, s3, i, j, k, l);
            }
            // Misplaced declaration of an exception variable
            catch(FREContext frecontext)
            {
                Log.e("[RBExtension]", frecontext.getMessage());
            }
            return null;
        }

        final RateBoxExtensionContext this$0;

        private RBEInitFunction()
        {
            this$0 = RateBoxExtensionContext.this;
            super();
        }

        RBEInitFunction(RBEInitFunction rbeinitfunction)
        {
            this();
        }
    }

    private class RBEOnLaunchFunction
        implements FREFunction
    {

        public FREObject call(FREContext frecontext, FREObject afreobject[])
        {
            boolean flag = onLaunch();
            try
            {
                frecontext = FREObject.newObject(flag);
            }
            // Misplaced declaration of an exception variable
            catch(FREContext frecontext)
            {
                Log.e("[RBExtension]", "Thread Exception");
                return null;
            }
            return frecontext;
        }

        final RateBoxExtensionContext this$0;

        private RBEOnLaunchFunction()
        {
            this$0 = RateBoxExtensionContext.this;
            super();
        }

        RBEOnLaunchFunction(RBEOnLaunchFunction rbeonlaunchfunction)
        {
            this();
        }
    }

    private class RBEResetConditionsFunction
        implements FREFunction
    {

        public FREObject call(FREContext frecontext, FREObject afreobject[])
        {
            resetConditions();
            return null;
        }

        final RateBoxExtensionContext this$0;

        private RBEResetConditionsFunction()
        {
            this$0 = RateBoxExtensionContext.this;
            super();
        }

        RBEResetConditionsFunction(RBEResetConditionsFunction rberesetconditionsfunction)
        {
            this();
        }
    }

    private class RBESetAutoPromptFunction
        implements FREFunction
    {

        public FREObject call(FREContext frecontext, FREObject afreobject[])
        {
            try
            {
                boolean flag = afreobject[0].getAsBool();
                setAutoPrompt(flag);
            }
            // Misplaced declaration of an exception variable
            catch(FREContext frecontext)
            {
                Log.e("[RBExtension]", frecontext.getMessage());
            }
            return null;
        }

        final RateBoxExtensionContext this$0;

        private RBESetAutoPromptFunction()
        {
            this$0 = RateBoxExtensionContext.this;
            super();
        }

        RBESetAutoPromptFunction(RBESetAutoPromptFunction rbesetautopromptfunction)
        {
            this();
        }
    }

    private class RBEShowRatingPromptFunction
        implements FREFunction
    {

        public FREObject call(FREContext frecontext, FREObject afreobject[])
        {
            try
            {
                frecontext = afreobject[0].getAsString();
                String s = afreobject[1].getAsString();
                String s1 = afreobject[2].getAsString();
                String s2 = afreobject[3].getAsString();
                afreobject = afreobject[4].getAsString();
                showRatingPrompt(frecontext, s, s1, s2, afreobject);
            }
            // Misplaced declaration of an exception variable
            catch(FREContext frecontext)
            {
                Log.e("[RBExtension]", frecontext.getMessage());
            }
            return null;
        }

        final RateBoxExtensionContext this$0;

        private RBEShowRatingPromptFunction()
        {
            this$0 = RateBoxExtensionContext.this;
            super();
        }

        RBEShowRatingPromptFunction(RBEShowRatingPromptFunction rbeshowratingpromptfunction)
        {
            this();
        }
    }

    private class RBEUseTestModeFunction
        implements FREFunction
    {

        public FREObject call(FREContext frecontext, FREObject afreobject[])
        {
            useTestMode();
            return null;
        }

        final RateBoxExtensionContext this$0;

        private RBEUseTestModeFunction()
        {
            this$0 = RateBoxExtensionContext.this;
            super();
        }

        RBEUseTestModeFunction(RBEUseTestModeFunction rbeusetestmodefunction)
        {
            this();
        }
    }


    public RateBoxExtensionContext()
    {
    }

    private void debugLog(String s)
    {
        if(!isTestMode)
        {
            return;
        } else
        {
            Log.d("[RBExtension]", s);
            return;
        }
    }

    private boolean isKindleDevice()
    {
        String s = Build.MODEL;
        String s1 = Build.MANUFACTURER;
        Log.d("[RBExtension]", (new StringBuilder("Deduce device prefix on ")).append(s).append(" of ").append(s1).toString());
        return s.indexOf("Kindle") != -1 || s1.indexOf("Amazon") != -1;
    }

    protected boolean areRatingConditionsMet()
    {
        long l = minDaysTilPrompt * 24 * 60 * 60 * 1000;
        boolean flag;
        boolean flag1;
        boolean flag2;
        boolean flag3;
        if(System.currentTimeMillis() >= firstLaunchedAt + l)
            flag1 = true;
        else
            flag1 = false;
        if(numEvents >= (long)minEventsTilPrompt)
            flag2 = true;
        else
            flag2 = false;
        if(numLaunches >= (long)minLaunchesTilPrompt)
            flag3 = true;
        else
            flag3 = false;
        if(lastNotNowAt == 0L)
        {
            flag = true;
        } else
        {
            long l1 = coolDownDays * 24 * 60 * 60 * 1000;
            if(System.currentTimeMillis() - lastNotNowAt >= l1)
                flag = true;
            else
                flag = false;
        }
        debugLog((new StringBuilder("Condition create_feature: Days:")).append(flag1).append(",events: ").append(flag2).append(",cool: ").append(flag).append(",launch: ").append(flag3).append(", never:").append(neverAgain).toString());
        return flag1 && flag2 && flag && flag3 && !neverAgain;
    }

    protected void cancelRating()
    {
        android.content.SharedPreferences.Editor editor = getPrefs().edit();
        editor.putBoolean("neverAgain", true);
        editor.commit();
        neverAgain = true;
        dispatchStatusEventAsync("NEVER_SELECTED", "");
    }

    protected void declineRating()
    {
        android.content.SharedPreferences.Editor editor = getPrefs().edit();
        lastNotNowAt = System.currentTimeMillis();
        editor.putLong("lastNotNowAt", lastNotNowAt);
        editor.commit();
        dispatchStatusEventAsync("LATER_SELECTED", "");
    }

    protected boolean didRateCurrentVersion()
    {
        return lastRatedAt != 0L;
    }

    public void dispose()
    {
    }

    public Map getFunctions()
    {
        HashMap hashmap = new HashMap();
        hashmap.put("ffiInitRateBox", new RBEInitFunction(null));
        hashmap.put("ffiOnLaunch", new RBEOnLaunchFunction(null));
        hashmap.put("ffiShowPrompt", new RBEShowRatingPromptFunction(null));
        hashmap.put("ffiUseTestMode", new RBEUseTestModeFunction(null));
        hashmap.put("ffiAreRatingConditionsMet", new RBEAreRatingConditionsMetFunction(null));
        hashmap.put("ffiIncrementEventCount", new RBEIncrementEventCountFunction(null));
        hashmap.put("ffiResetConditions", new RBEResetConditionsFunction(null));
        hashmap.put("ffiDidRateCurrentVersion", new RBEDidRateCurrentVersionFunction(null));
        hashmap.put("ffiSetAutoPrompt", new RBESetAutoPromptFunction(null));
        return hashmap;
    }

    protected SharedPreferences getPrefs()
    {
        String s = "1";
        String s1 = getActivity().getPackageManager().getPackageInfo(getActivity().getPackageName(), 0).versionName;
        s = s1;
_L2:
        return getActivity().getSharedPreferences((new StringBuilder("rbmmgex")).append(s).toString(), 0);
        Exception exception;
        exception;
        Log.e("[RBExtension]", "Couldn't read version string!");
        if(true) goto _L2; else goto _L1
_L1:
    }

    protected void goAndRate()
    {
        Object obj = getPrefs().edit();
        lastRatedAt = System.currentTimeMillis();
        ((android.content.SharedPreferences.Editor) (obj)).putLong("lastRatedAt", lastRatedAt);
        ((android.content.SharedPreferences.Editor) (obj)).commit();
        obj = "com.adobe.air";
        if(!isTestMode)
            obj = getActivity().getPackageName();
        String s = (new StringBuilder("market://details?id=")).append(((String) (obj))).toString();
        if(isKindleDevice())
            s = (new StringBuilder("http://www.amazon.com/gp/mas/dl/android?p=")).append(((String) (obj))).toString();
        obj = new Intent("android.intent.action.VIEW", Uri.parse(s));
        ((Intent) (obj)).addFlags(0x40080000);
        getActivity().startActivity(((Intent) (obj)));
        dispatchStatusEventAsync("RATE_SELECTED", "");
    }

    protected boolean incrementEventCount()
    {
        SharedPreferences sharedpreferences = getPrefs();
        android.content.SharedPreferences.Editor editor = sharedpreferences.edit();
        numEvents = sharedpreferences.getLong("numEvents", 0L);
        numEvents = numEvents + 1L;
        editor.putLong("numEvents", numEvents);
        editor.commit();
        boolean flag = areRatingConditionsMet();
        if(flag && autoPromptEnabled)
            showRatingPrompt(title, message, rateNowLabel, declineLabel, neverAgainLabel);
        return flag && autoPromptEnabled;
    }

    protected void initRateBox(String s, String s1, String s2, String s3, String s4, int i, int j, 
            int k, int l)
    {
        autoPromptEnabled = true;
        title = s;
        message = s1;
        rateNowLabel = s2;
        declineLabel = s3;
        neverAgainLabel = s4;
        minLaunchesTilPrompt = i;
        minEventsTilPrompt = j;
        minDaysTilPrompt = k;
        coolDownDays = l;
        isTestMode = false;
        s = getPrefs();
        s1 = s.edit();
        firstLaunchedAt = s.getLong("firstLaunchedAt", 0L);
        if(firstLaunchedAt == 0L)
        {
            firstLaunchedAt = System.currentTimeMillis();
            s1.putLong("firstLaunchedAt", firstLaunchedAt);
        }
        numEvents = s.getLong("numEvents", 0L);
        numLaunches = s.getLong("numLaunches", 0L);
        lastNotNowAt = s.getLong("lastNotNowAt", 0L);
        lastRatedAt = s.getLong("lastRatedAt", 0L);
        neverAgain = s.getBoolean("neverAgain", false);
        s1.commit();
    }

    protected boolean isNetworkAvailable()
    {
        return ((ConnectivityManager)getActivity().getSystemService("connectivity")).getActiveNetworkInfo() != null;
    }

    public void onClick(DialogInterface dialoginterface, int i)
    {
        dialoginterface.dismiss();
        switch(i)
        {
        default:
            return;

        case -1: 
            goAndRate();
            return;

        case -3: 
            declineRating();
            return;

        case -2: 
            cancelRating();
            return;
        }
    }

    protected boolean onLaunch()
    {
        SharedPreferences sharedpreferences = getPrefs();
        android.content.SharedPreferences.Editor editor = sharedpreferences.edit();
        firstLaunchedAt = sharedpreferences.getLong("firstLaunchedAt", 0L);
        if(firstLaunchedAt == 0L)
        {
            firstLaunchedAt = System.currentTimeMillis();
            editor.putLong("firstLaunchedAt", firstLaunchedAt);
        }
        numLaunches = sharedpreferences.getLong("numLaunches", 0L);
        numLaunches = numLaunches + 1L;
        editor.putLong("numLaunches", numLaunches);
        neverAgain = sharedpreferences.getBoolean("neverAgain", false);
        editor.commit();
        boolean flag = areRatingConditionsMet();
        if(flag && autoPromptEnabled)
            showRatingPrompt(title, message, rateNowLabel, declineLabel, neverAgainLabel);
        return flag && autoPromptEnabled;
    }

    protected void resetConditions()
    {
        android.content.SharedPreferences.Editor editor = getPrefs().edit();
        firstLaunchedAt = System.currentTimeMillis();
        editor.putLong("firstLaunchedAt", firstLaunchedAt);
        numEvents = 0L;
        editor.putLong("numEvents", numEvents);
        numLaunches = 0L;
        editor.putLong("numLaunches", numLaunches);
        neverAgain = false;
        editor.putBoolean("neverAgain", false);
        lastNotNowAt = 0L;
        editor.putLong("lastNotNowAt", lastNotNowAt);
        editor.commit();
    }

    protected void setAutoPrompt(boolean flag)
    {
        autoPromptEnabled = flag;
    }

    protected void showRatingPrompt(String s, String s1, String s2, String s3, String s4)
    {
        if(!isNetworkAvailable())
        {
            dispatchStatusEventAsync("NETWORK_UNAVAILABLE", "");
            return;
        } else
        {
            android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(getActivity());
            builder.setMessage(s1);
            builder.setTitle(s);
            builder.setPositiveButton(s2, this);
            builder.setNeutralButton(s3, this);
            builder.setNegativeButton(s4, this);
            builder.create().show();
            dispatchStatusEventAsync("PROMPT_DISPLAYED", "");
            return;
        }
    }

    protected void useTestMode()
    {
        isTestMode = true;
    }

    private static final String AMAZON_MARKET_PREFIX = "http://www.amazon.com/gp/mas/dl/android?p=";
    private static final String GOOGLE_MARKET_PREFIX = "market://details?id=";
    private static final String TAG = "[RBExtension]";
    private static final String TEST_PACKAGE_ID = "com.adobe.air";
    private boolean autoPromptEnabled;
    private int coolDownDays;
    private String declineLabel;
    private long firstLaunchedAt;
    private boolean isTestMode;
    private long lastNotNowAt;
    private long lastRatedAt;
    private String message;
    private int minDaysTilPrompt;
    private int minEventsTilPrompt;
    private int minLaunchesTilPrompt;
    private boolean neverAgain;
    private String neverAgainLabel;
    private long numEvents;
    private long numLaunches;
    private String rateNowLabel;
    private String title;
}
