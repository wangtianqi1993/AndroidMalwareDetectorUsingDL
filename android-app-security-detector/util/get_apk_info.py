# !/usr/bin/env python
# -*- coding: utf-8 -*-

__author__ = 'wtq'

import os
import re
import time
import json
from androguard.core import androconf
from androguard.core.bytecodes import apk
from detector.logger import DetectorLogger

logger = DetectorLogger(path="apk_information.log")


class GetApkInfo():
    """
    get_apk_base_info() 获取配置文件中的权限,activity, service等信息
    get_apk_other_info() 获取apk中的电话号码，qq号，邮箱等信息
    """

    def get_apk_base_info(self, apk_path, json_store_path):
        """
        get the apk base information then save to log
        :param apk_path:
        :return:
        """
        time_start = time.time()
        base_info_dict = {}
        permission_info = {}

        for temp in os.listdir(apk_path):

            path = os.path.join(apk_path, temp)
            temp = temp.split(".")[0]
            base_info_dict[temp] = {}
            base_info_dict[temp]["activity"] = []
            base_info_dict[temp]["service"] = []
            base_info_dict[temp]["receiver"] = []
            base_info_dict[temp]["permission"] = []
            permission_info[temp] = []

            ret_type = androconf.is_android(path)
            if ret_type == "APK":
                logger.info(os.path.basename(path) + ":")
                try:

                    a = apk.APK(path)
                    p = a.get_package()
                    base_info_dict[temp]["package_name"] = p

                    if a.is_valid_APK():

                        activities = a.get_activities()
                        for i in activities:
                            logger.info(i)
                            base_info_dict[temp]["activity"].append(i)

                        services = a.get_services()
                        for i in services:
                            logger.info(i)
                            base_info_dict[temp]["service"].append(i)

                        receivers = a.get_receivers()
                        for i in receivers:
                            logger.info(i)
                            base_info_dict[temp]["receiver"].append(i)

                        permissions = a.get_requested_permissions()
                        for i in permissions:
                            logger.info(i)
                            base_info_dict[temp]["permission"].append(i)
                            permission_info[temp].append(i)

                except Exception, e:
                    logger.info(e)
            time_end = time.time()
        import json
        with open(json_store_path, "w") as fp:
            json.dump(permission_info, fp)

        return base_info_dict

        print 'time', time_end - time_start

    def other_complex_info(self, file_path, word_dict):
        file_object = open(file_path)

        # 匹配特定字段的正则
        relu_match = {"email": "\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*",
                      "url": "[a-zA-z]+://[^\s]*",
                      "telephone": "\d{3}-\d{8}|\d{4}-\d{7}",
                      "qq": "[1-9][0-9]{4,}",
                      "id_card": "\d{18}",
                      "bank_card": "\d{16}|\d{18}|\d{19}",
                      "ip": "\d+\.\d+\.\d+\.\d+",
                      "mobilephone": "[1]\d{10}"
                      }

        try:
            file_content = file_object.readlines()
        finally:
            file_object.close()

        # 每个java文件按行匹配
        for word in file_content:
            if len(word) > 1:
                # 读取到的每行应用正则提取目标内容
                for item in relu_match:
                    result = re.search(re.compile(relu_match[item]), word)
                    if result:
                        key = result.group()
                        if item not in word_dict:
                            word_dict[item] = {}

                        if key not in word_dict[item]:
                            word_dict[item][key] = 1
                        else:
                            word_dict[item][key] += 1

    def scan_file(self, file_path, word_dict):
        """
        scan file under file_path save it into code_dict
        :param file_path:
        :param word_dict:
        :return:
        """
        files = os.listdir(file_path)
        for fi in files:
            fi_d = os.path.join(file_path, fi)
            if os.path.isdir(fi_d):
                self.scan_file(fi_d, word_dict)
            else:
                if os.path.splitext(fi_d)[1] == '.java':
                    self.other_complex_info(fi_d, word_dict)
        return word_dict

    def get_apk_other_info(self, apk_dir):
        """

        :param apk_dir:
        :return:
        """
        apk_dict = {}
        for dir in os.listdir(apk_dir):
            raw_dir = dir
            apk_dict[raw_dir] = {}

            #print "apk name ", dir
            path = os.path.join(apk_dir, dir)
            self.scan_file(path, apk_dict[raw_dir])
        return apk_dict

    def merge_apk_info(self, apk_path, source_path):
        """

        :param apk_path:
        :param source_path:
        :return:
        """
        merge_dict = {}
        apk_base_info = self.get_apk_base_info(apk_path)
        apk_other_info = self.get_apk_other_info(source_path)
        for apk_name in apk_base_info:
            merge_dict[apk_name] = {}

            for info in apk_base_info[apk_name]:
                merge_dict[apk_name][info] = apk_base_info[apk_name][info]

            if apk_name in apk_other_info:
                for info in apk_other_info[apk_name]:
                    merge_dict[apk_name][info] = apk_other_info[apk_name][info]
        print merge_dict
        with open("/home/wtq/develop/workspace/get_apk_info_shell/result.json", 'w') as fp:
            json.dump(merge_dict, fp)


if __name__ == "__main__":

    apk_instance = GetApkInfo()
    apk_instance.get_apk_base_info("/home/wtq/develop/workspace/mumaTrainApk/formalApk", "/home/wtq/develop/workspace/gitlab/android-app-security-detector/detector/yuankong_malware/feature/benign_permission.json")
    # apk_instance.merge_apk_info("/home/wtq/test_apk", "/home/wtq/test_classes")

